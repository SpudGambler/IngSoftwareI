/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views_pkg;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import javax.swing.*;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import model_pkg.Connection_DB;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 *
 * @author jaime
 */
public class DialogInformation extends javax.swing.JDialog {
    int biker_document;
    Connection_DB con = new Connection_DB();
    Connection cn;
    Statement st;
    ResultSet rs;
    DefaultTableModel model;

    /**
     * Creates new form DialogInformation
     */
    public DialogInformation(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        start_spinners();
        
    }
    
   public void setBikerDocument(int biker_document){
       this.biker_document = biker_document;
       lbl_title.setText("Rutas del Usuario "+ biker_document);
       show_routes();
   }
    
    public void start_spinners(){
        cbx_formatEnd.setFocusable(false);
        cbx_formatStart.setFocusable(false);
        spn_hoursStartTime.setFocusable(false);
        spn_hoursStartTime.setEditor(new JSpinner.DefaultEditor(spn_hoursStartTime));
        spn_minutesStartTime.setFocusable(false);
        spn_minutesStartTime.setEditor(new JSpinner.DefaultEditor(spn_minutesStartTime));
        spn_secondStartTime.setFocusable(false);
        spn_secondStartTime.setEditor(new JSpinner.DefaultEditor(spn_secondStartTime));
        spn_hoursEndTime.setFocusable(false);
        spn_hoursEndTime.setEditor(new JSpinner.DefaultEditor(spn_hoursEndTime));
        spn_minutesEndTime.setFocusable(false);
        spn_minutesEndTime.setEditor(new JSpinner.DefaultEditor(spn_minutesEndTime));
        spn_secondEndTime.setFocusable(false);
        spn_secondEndTime.setEditor(new JSpinner.DefaultEditor(spn_secondEndTime));
        spn_kilometer.setFocusable(false);
        spn_kilometer.setEditor(new JSpinner.DefaultEditor(spn_kilometer));
        spn_day.setFocusable(false);
        spn_day.setEditor(new JSpinner.DefaultEditor(spn_day));
        spn_month.setFocusable(false);
        spn_month.setEditor(new JSpinner.DefaultEditor(spn_month));
        spn_year.setFocusable(false);
        spn_year.setEditor(new JSpinner.DefaultEditor(spn_year));
        spn_month_see.setFocusable(false);
        spn_month_see.setEditor(new JSpinner.DefaultEditor(spn_month_see));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_title = new javax.swing.JLabel();
        lbl_startTime = new javax.swing.JLabel();
        cbx_formatStart = new javax.swing.JComboBox<>();
        spn_hoursStartTime = new javax.swing.JSpinner();
        lbl_hours = new javax.swing.JLabel();
        lbl_minutes = new javax.swing.JLabel();
        lbl_minutes1 = new javax.swing.JLabel();
        spn_minutesStartTime = new javax.swing.JSpinner();
        spn_secondStartTime = new javax.swing.JSpinner();
        lbl_endTime = new javax.swing.JLabel();
        lbl_hours1 = new javax.swing.JLabel();
        spn_minutesEndTime = new javax.swing.JSpinner();
        spn_secondEndTime = new javax.swing.JSpinner();
        cbx_formatEnd = new javax.swing.JComboBox<>();
        lbl_minutes2 = new javax.swing.JLabel();
        spn_hoursEndTime = new javax.swing.JSpinner();
        lbl_minutes3 = new javax.swing.JLabel();
        lbl_startPlace = new javax.swing.JLabel();
        txt_startPlace = new javax.swing.JTextField();
        txt_endPlace = new javax.swing.JTextField();
        lbl_endPlace = new javax.swing.JLabel();
        lbl_kilometer = new javax.swing.JLabel();
        spn_kilometer = new javax.swing.JSpinner();
        lbl_date = new javax.swing.JLabel();
        lbl_hours2 = new javax.swing.JLabel();
        spn_day = new javax.swing.JSpinner();
        spn_month = new javax.swing.JSpinner();
        lbl_minutes4 = new javax.swing.JLabel();
        spn_year = new javax.swing.JSpinner();
        lbl_minutes5 = new javax.swing.JLabel();
        btn_register_user = new javax.swing.JButton();
        lbl_idRoute = new javax.swing.JLabel();
        txt_idRoute = new javax.swing.JTextField();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        lbl_title1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_routes = new javax.swing.JTable();
        btn_delete2 = new javax.swing.JButton();
        lbl_date1 = new javax.swing.JLabel();
        spn_month_see = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbl_title.setFont(new java.awt.Font("MV Boli", 0, 30)); // NOI18N
        lbl_title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_title.setText("Rutas del Usuario ");

        lbl_startTime.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_startTime.setText("Hora Inicio: ");

        cbx_formatStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        cbx_formatStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_formatStartActionPerformed(evt);
            }
        });

        spn_hoursStartTime.setModel(new javax.swing.SpinnerListModel(new String[] {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"}));
        spn_hoursStartTime.setFocusable(false);

        lbl_hours.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_hours.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_hours.setText("HH");

        lbl_minutes.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_minutes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_minutes.setText("MM");

        lbl_minutes1.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_minutes1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_minutes1.setText("SS");

        spn_minutesStartTime.setModel(new javax.swing.SpinnerListModel(new String[] {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        spn_minutesStartTime.setFocusable(false);

        spn_secondStartTime.setModel(new javax.swing.SpinnerListModel(new String[] {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        spn_secondStartTime.setFocusable(false);

        lbl_endTime.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_endTime.setText("Hora Final: ");

        lbl_hours1.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_hours1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_hours1.setText("HH");

        spn_minutesEndTime.setModel(new javax.swing.SpinnerListModel(new String[] {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        spn_minutesEndTime.setFocusable(false);

        spn_secondEndTime.setModel(new javax.swing.SpinnerListModel(new String[] {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59"}));
        spn_secondEndTime.setFocusable(false);

        cbx_formatEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        cbx_formatEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbx_formatEndActionPerformed(evt);
            }
        });

        lbl_minutes2.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_minutes2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_minutes2.setText("MM");

        spn_hoursEndTime.setModel(new javax.swing.SpinnerListModel(new String[] {"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"}));
        spn_hoursEndTime.setFocusable(false);

        lbl_minutes3.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_minutes3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_minutes3.setText("SS");

        lbl_startPlace.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_startPlace.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_startPlace.setText("Lugar Inicio:");

        txt_startPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_startPlaceActionPerformed(evt);
            }
        });

        txt_endPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_endPlaceActionPerformed(evt);
            }
        });

        lbl_endPlace.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_endPlace.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_endPlace.setText("Lugar Final:");

        lbl_kilometer.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_kilometer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_kilometer.setText("Kilometros:");

        spn_kilometer.setModel(new javax.swing.SpinnerNumberModel(0, 0, 225, 1));
        spn_kilometer.setFocusable(false);

        lbl_date.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_date.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_date.setText("Fecha:");

        lbl_hours2.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_hours2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_hours2.setText("Día");

        spn_day.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        spn_day.setFocusable(false);

        spn_month.setModel(new javax.swing.SpinnerListModel(new String[] {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"}));
        spn_month.setFocusable(false);

        lbl_minutes4.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_minutes4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_minutes4.setText("Mes");

        spn_year.setModel(new javax.swing.SpinnerListModel(new String[] {"2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999", "1998", "1997", "1996", "1995", "1994", "1993", "1992", "1991", "1990", "1989", "1988", "1987", "1986", "1985", "1984", "1983", "1982", "1981", "1980", "1979", "1978", "1977", "1976", "1975", "1974", "1973", "1972", "1971", "1970", "1969", "1968", "1967", "1966", "1965", "1964", "1963", "1962", "1961", "1960", "1959", "1958", "1957", "1956", "1955", "1954", "1953", "1952", "1951", "1950"}));
        spn_year.setFocusable(false);

        lbl_minutes5.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        lbl_minutes5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_minutes5.setText("Año");

        btn_register_user.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        btn_register_user.setText("Registrar");
        btn_register_user.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_register_userActionPerformed(evt);
            }
        });

        lbl_idRoute.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_idRoute.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_idRoute.setText("ID:");

        txt_idRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_idRouteActionPerformed(evt);
            }
        });

        btn_edit.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        btn_edit.setText("Editar");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        btn_delete.setText("Eliminar");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        lbl_title1.setFont(new java.awt.Font("MV Boli", 0, 24)); // NOI18N
        lbl_title1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_title1.setText("Tabla de Rutas");

        tbl_routes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha", "Hora Inicio", "Hora Fin", "Tiempo", "Kilometros", "Lugar Inicio", "Lugar Fin"
            }
        ));
        tbl_routes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_routesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_routes);

        btn_delete2.setFont(new java.awt.Font("Dubai Medium", 0, 18)); // NOI18N
        btn_delete2.setText("Cerrar Sesión");
        btn_delete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delete2ActionPerformed(evt);
            }
        });

        lbl_date1.setFont(new java.awt.Font("Ebrima", 0, 16)); // NOI18N
        lbl_date1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_date1.setText("Mes a Evaluar:");

        spn_month_see.setModel(new javax.swing.SpinnerListModel(new String[] {"Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"}));
        spn_month_see.setFocusable(false);
        spn_month_see.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spn_month_seeStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_title1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_startTime)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbl_hours, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spn_hoursStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbl_minutes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spn_minutesStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbl_minutes1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spn_secondStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(cbx_formatStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_endTime)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbl_hours1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spn_hoursEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbl_minutes2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spn_minutesEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbl_minutes3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(spn_secondEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(cbx_formatEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_endPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_endPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_startPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_startPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lbl_idRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txt_idRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lbl_kilometer, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbl_date, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_hours2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lbl_minutes4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(spn_kilometer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(spn_day, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(spn_month, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(spn_year, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lbl_minutes5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(btn_register_user, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(248, 248, 248))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(24, 24, 24)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(lbl_date1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(spn_month_see, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(254, 254, 254)
                                .addComponent(btn_delete2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_hours)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_startTime)
                            .addComponent(spn_hoursStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spn_minutesStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spn_secondStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbx_formatStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lbl_minutes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_minutes1))
                        .addGap(25, 25, 25)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_hours1)
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_endTime)
                            .addComponent(spn_hoursEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spn_minutesEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spn_secondEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbx_formatEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lbl_minutes2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_minutes3))
                        .addGap(25, 25, 25)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_startPlace)
                    .addComponent(txt_startPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_endPlace)
                    .addComponent(txt_endPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_kilometer)
                    .addComponent(spn_kilometer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_hours2)
                    .addComponent(lbl_minutes4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_minutes5))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_date)
                    .addComponent(spn_day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spn_month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spn_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_idRoute)
                    .addComponent(txt_idRoute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_register_user, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_date1)
                    .addComponent(spn_month_see, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_title1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_delete2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbx_formatStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_formatStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_formatStartActionPerformed

    private void cbx_formatEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbx_formatEndActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbx_formatEndActionPerformed

    private void txt_startPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_startPlaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_startPlaceActionPerformed

    private void txt_endPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_endPlaceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_endPlaceActionPerformed

    private void btn_register_userActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_register_userActionPerformed
        // TODO add your handling code here:
        registrarDatos();
    }//GEN-LAST:event_btn_register_userActionPerformed

    private void txt_idRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_idRouteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_idRouteActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        // TODO add your handling code here:
        edit_route();
    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        delete_routes();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_delete2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delete2ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        this.setEnabled(false);
    }//GEN-LAST:event_btn_delete2ActionPerformed

    private void tbl_routesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_routesMouseClicked
        // TODO add your handling code here:
        int row = tbl_routes.getSelectedRow();
        if(row>=0){
            int idRoute = Integer.parseInt(tbl_routes.getValueAt(row, 0).toString());
            String date = tbl_routes.getValueAt(row, 1).toString();
            String time_start = tbl_routes.getValueAt(row, 2).toString();
            String hour1 = load_hours(time_start,0);
            String minute1 = load_minutes(time_start);
            String second1 = load_seconds(time_start);
            String time_end = tbl_routes.getValueAt(row, 3).toString();
            String hour2 = load_hours(time_end,1);
            String minute2 = load_minutes(time_end);
            String second2 = load_seconds(time_end);
            String year_char = load_year(date);
            String month = load_month(date);
            int day_int = load_day(date);
            int kilometer = Integer.parseInt(tbl_routes.getValueAt(row, 5).toString());
            String start_place = tbl_routes.getValueAt(row, 6).toString();
            String end_place = tbl_routes.getValueAt(row, 7).toString();
            txt_idRoute.setText(String.valueOf(idRoute));
            txt_startPlace.setText(start_place);
            txt_endPlace.setText(end_place);
            spn_kilometer.setValue(kilometer);
            spn_year.setValue(year_char);
            spn_month.setValue(month);
            spn_day.setValue(day_int);
            spn_hoursStartTime.setValue(hour1);
            spn_hoursEndTime.setValue(hour2);
            spn_minutesStartTime.setValue(minute1);
            spn_minutesEndTime.setValue(minute2);
            spn_secondStartTime.setValue(second1);
            spn_secondEndTime.setValue(second2);
        }
    }//GEN-LAST:event_tbl_routesMouseClicked

    private void spn_month_seeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spn_month_seeStateChanged
        // TODO add your handling code here:
        clear_rows_table();
        show_routes();
    }//GEN-LAST:event_spn_month_seeStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogInformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DialogInformation dialog = new DialogInformation(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    public void delete_routes(){
        int row_hospital = tbl_routes.getSelectedRow();
        if(row_hospital == -1)
            JOptionPane.showMessageDialog(this, "Debes de seleccionar un registro de la tabla");
        else{
            int id_route = Integer.parseInt(txt_idRoute.getText());
            String sql = "DELETE FROM `tb_routes` WHERE id = "+(id_route);
            try{
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(sql);
                clear_rows_table();
                JOptionPane.showMessageDialog(this, "Se ha eliminado el registro");
                clear_rows_table();
                show_routes();
            }catch(SQLException e){
                JOptionPane.showMessageDialog(this, "No se pudo eliminar la información del registro");
            }
        }
    }
    
    public void edit_route(){
        int row_hospital = tbl_routes.getSelectedRow();
        if (row_hospital < 0) {
            JOptionPane.showMessageDialog(this, "Faltan campos por diligenciar");
        }else{
            int id_route = Integer.parseInt(txt_idRoute.getText());
            int start_hour = Integer.parseInt(String.valueOf(spn_hoursStartTime.getValue()));
            int end_hour = Integer.parseInt(String.valueOf(spn_hoursEndTime.getValue()));
            if(cbx_formatStart.getSelectedIndex()==1 && start_hour!=12){
                start_hour+=12;
            }
            if(cbx_formatEnd.getSelectedIndex()==1 && end_hour!=12){
                end_hour+=12;
            }
            
            if(cbx_formatStart.getSelectedIndex()==0 && start_hour==12){
                start_hour+=12;
            }
            if(cbx_formatEnd.getSelectedIndex()==0 && end_hour==12){
                end_hour+=12;
            }

            Time start_time = new Time(start_hour,
                                       Integer.parseInt(String.valueOf(spn_minutesStartTime.getValue())), 
                                       Integer.parseInt(String.valueOf(spn_secondStartTime.getValue())));

            Time end_time = new Time(end_hour,
                                     Integer.parseInt(String.valueOf(spn_minutesEndTime.getValue())), 
                                     Integer.parseInt(String.valueOf(spn_secondEndTime.getValue())));
            String start_place = txt_startPlace.getText();
            String end_place = txt_endPlace.getText();
            int kilometers = Integer.parseInt(String.valueOf(spn_kilometer.getValue()));
            java.sql.Date date = obtain_date();
            Time total_time = null;
            if(date!=null){
                total_time = calcule_total_time(date,start_time,end_time);
            }
            boolean can = compare_dates(start_time,total_time);
            if (start_place.isEmpty() || end_place.isEmpty() || total_time == null || kilometers==0 || date==null) {
                JOptionPane.showMessageDialog(this, "Faltan campos por diligenciar");
            }else if (can){
                String sql = "UPDATE `tb_routes` SET `date`='"+date+"',`start_hour`='"+start_time+"',`end_hour`='"+end_time+"',`time`='"+total_time+"',`kilometers`='"+kilometers+"',`start_place`='"+start_place+"',`end_place`='"+end_place+"' WHERE `id` = "+id_route;
                try{
                    cn = con.getConnection();
                    st = cn.createStatement();
                    st.executeUpdate(sql);
                    clear_rows_table();
                    JOptionPane.showMessageDialog(this, "Se ha actualizado el registro");
                    show_routes();
                }catch(SQLException e){
                    JOptionPane.showMessageDialog(this, "No se pudo actualizar la información del registro");
                }
            }else{
                JOptionPane.showMessageDialog(this, "Las horas ingresadas no son válidas");
            }
        }
    }
    
    public String load_seconds(String time){
        String seconds_char = String.valueOf(time.charAt(6));
        seconds_char += String.valueOf(time.charAt(7));
        return seconds_char;
    }
    
    public String load_minutes(String time){
        String minutes_char = String.valueOf(time.charAt(3));
        minutes_char += String.valueOf(time.charAt(4));
        return minutes_char;
    }
    
    public String load_hours(String time, int timer){
        String hour_char = String.valueOf(time.charAt(0));
        hour_char += String.valueOf(time.charAt(1));
        int timeSe = Integer.parseInt(hour_char);
        if(timeSe > 12){
            if(timer == 0){
                cbx_formatStart.setSelectedIndex(1);
            }else if(timer == 1){
                cbx_formatEnd.setSelectedIndex(1);
            }
            if( (timeSe-12) <10){
                hour_char = "0" + String.valueOf((timeSe-12));
            }else{
                hour_char = String.valueOf((timeSe-12));
            }
        }else if(timeSe==12){
            if(timer == 0){
                cbx_formatStart.setSelectedIndex(1);
            }else if(timer == 1){
                cbx_formatEnd.setSelectedIndex(1);
            }
            hour_char = "12";
        }else if(timeSe==0){
            if(timer == 0){
                cbx_formatStart.setSelectedIndex(0);
            }else if(timer == 1){
                cbx_formatEnd.setSelectedIndex(0);
            }
            hour_char = "12";
        }else{
            if(timer == 0){
                cbx_formatStart.setSelectedIndex(0);
            }else if(timer == 1){
                cbx_formatEnd.setSelectedIndex(0);
            }
            if(timeSe<10){
                hour_char = "0" + String.valueOf((timeSe));
            }else{
                hour_char = String.valueOf((timeSe));
            }
        }
        return hour_char;
    }
    
    public String load_year(String date){
        String year_char = String.valueOf(date.charAt(0));
        year_char += String.valueOf(date.charAt(1));
        year_char += String.valueOf(date.charAt(2));
        year_char += String.valueOf(date.charAt(3));
        return year_char;
    }
    
    public String load_month(String date){
        String month_char = String.valueOf(date.charAt(5));
        month_char += String.valueOf(date.charAt(6));
        int number_month = Integer.parseInt(month_char);
        String month = "";
        switch (number_month) {
            case 1:
                month = "Enero";
                break;
            case 2:
                month = "Febrero";
                break;
            case 3:
                month = "Marzo";
                break;
            case 4:
                month = "Abril";
                break;
            case 5:
                month = "Mayo";
                break;
            case 6:
                month = "Junio";
                break;
            case 7:
                month = "Julio";
                break;
            case 8:
                month = "Agosto";
                break;
            case 9:
                month = "Septiembre";
                break;
            case 10:
                month = "Octubre";
                break;
            case 11:
                month = "Noviembre";
                break;
            case 12:
                month = "Diciembre";
                break;
            default:
                break;
        }
        return month;
    }
    
    public int load_day(String date){
        String day_char = String.valueOf(date.charAt(8));
        day_char += String.valueOf(date.charAt(9));
        int day = Integer.parseInt(day_char);
        return day;
    }
    
    public void show_routes(){
        String query = "SELECT * FROM `tb_routes` WHERE 1";
        try {
            cn = con.getConnection();
            st = cn.createStatement();
            rs = st.executeQuery(query);
            Object[] routes;
            routes = new Object[9];
            model = (DefaultTableModel)tbl_routes.getModel();
            while(rs.next()){
                routes[8]= rs.getInt("biker_document");
                routes[1]= rs.getString("date");
                boolean correct_month = check_month(routes[1].toString());
                int document = Integer.parseInt(routes[8].toString());
                if(document == this.biker_document && correct_month == true){
                    routes[0]= rs.getInt("id");
                    routes[1]= rs.getString("date");
                    routes[2]= rs.getString("start_hour");
                    routes[3]= rs.getString("end_hour");
                    routes[4]= rs.getString("time");
                    routes[5]= rs.getString("kilometers");
                    routes[6]= rs.getString("start_place");
                    routes[7]= rs.getString("end_place");
                    model.addRow(routes);
                }
            }
            tbl_routes.setModel(model);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "No se encontrarón registros de hospitales");
        }
    }
    
    public boolean check_month(String date){
        String month = load_month(date);
        int month_data = -1;
        switch (month) {
            case "Enero":
                month_data = 0;
                break;
            case "Febrero":
                month_data = 1;
                break;
            case "Marzo":
                month_data = 2;
                break;
            case "Abril":
                month_data = 3;
                break;
            case "Mayo":
                month_data = 4;
                break;
            case "Junio":
                month_data = 5;
                break;
            case "Julio":
                month_data = 6;
                break;
            case "Agosto":
                month_data = 7;
                break;
            case "Septiembre":
                month_data = 8;
                break;
            case "Octubre":
                month_data = 9;
                break;
            case "Noviembre":
                month_data = 10;
                break;
            case "Diciembre":
                month_data = 11;
                break;
            default:
                break;
        }
        int selected_month = selected_month();
        return selected_month == month_data;
    }
    
    public int selected_month(){
        String month = String.valueOf(spn_month_see.getValue());
        int month_data = 0;
        switch (month) {
            case "Enero":
                month_data = 0;
                break;
            case "Febrero":
                month_data = 1;
                break;
            case "Marzo":
                month_data = 2;
                break;
            case "Abril":
                month_data = 3;
                break;
            case "Mayo":
                month_data = 4;
                break;
            case "Junio":
                month_data = 5;
                break;
            case "Julio":
                month_data = 6;
                break;
            case "Agosto":
                month_data = 7;
                break;
            case "Septiembre":
                month_data = 8;
                break;
            case "Octubre":
                month_data = 9;
                break;
            case "Noviembre":
                month_data = 10;
                break;
            case "Diciembre":
                month_data = 11;
                break;
            default:
                break;
        }
        return month_data;
    }
    
    void clear_rows_table(){
        for (int i = 0; i < tbl_routes.getRowCount(); i++) {
            model.removeRow(i);
            i -= 1;
        }
    }
    
    public void registrarDatos(){
        int start_hour = Integer.parseInt(String.valueOf(spn_hoursStartTime.getValue()));
        int end_hour = Integer.parseInt(String.valueOf(spn_hoursEndTime.getValue()));
        if(cbx_formatStart.getSelectedIndex()==1 && start_hour!=12){
            start_hour+=12;
        }
        if(cbx_formatEnd.getSelectedIndex()==1 && end_hour!=12){
            end_hour+=12;
        }
        if(cbx_formatStart.getSelectedIndex()==0 && start_hour==12){
            start_hour+=12;
        }
        if(cbx_formatEnd.getSelectedIndex()==0 && end_hour==12){
            end_hour+=12;
        }
        Time start_time = new Time(start_hour,
                                   Integer.parseInt(String.valueOf(spn_minutesStartTime.getValue())), 
                                   Integer.parseInt(String.valueOf(spn_secondStartTime.getValue())));
        
        Time end_time = new Time(end_hour,
                                 Integer.parseInt(String.valueOf(spn_minutesEndTime.getValue())), 
                                 Integer.parseInt(String.valueOf(spn_secondEndTime.getValue())));
        String start_place = txt_startPlace.getText();
        String end_place = txt_endPlace.getText();
        int kilometers = Integer.parseInt(String.valueOf(spn_kilometer.getValue()));
        java.sql.Date date = obtain_date();
        Time total_time = null;
        if(date!=null){
            total_time = calcule_total_time(date,start_time,end_time);
        }
        boolean can = false;
        if(start_time!=null && total_time!=null){
            can = compare_dates(start_time,total_time);
        }
        if (start_place.isEmpty() || end_place.isEmpty() || total_time == null || kilometers==0 || date==null) {
            JOptionPane.showMessageDialog(this, "Faltan campos por diligenciar");
        } else if (can){
            String query = "INSERT INTO `tb_routes`"
                    + "(`date`, `start_hour`, `end_hour`, `time`, `kilometers`, `start_place`, `end_place`, `biker_document`) "
                    + "VALUES ('"+date+"','"+start_time+"','"+end_time+"','"+total_time+"','"+kilometers+"','"+start_place+"','"
                    + ""+end_place+"','"+this.biker_document+"')";
            try {
                cn = con.getConnection();
                st = cn.createStatement();
                st.executeUpdate(query);
                JOptionPane.showMessageDialog(this, "Se ha creado el registro con éxito");
                clear_rows_table();
                show_routes();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "No se pudo crear el registro");
            }
        }else{
            JOptionPane.showMessageDialog(this, "Las horas ingresadas no son válidas");
        }
    }
    
    public Time calcule_total_time(java.sql.Date d, Time t1, Time t2){
        Date date1 = new Date(d.getYear(), d.getMonth(), d.getDay(), t1.getHours(), t1.getMinutes(), t1.getSeconds());
        Date date2 = new Date(d.getYear(), d.getMonth(), d.getDay(), t2.getHours(), t2.getMinutes(), t2.getSeconds());
        long time1 = date1.getTime();
        long time2 = date2.getTime();
        long l=time2-time1;
        long day=l/(24*60*60*1000);
        long hour=(l/(60*60*1000)-day*24);
        long min=((l/(60*1000))-day*24*60-hour*60);
        long s=(l/1000-day*24*60*60-hour*60*60-min*60);
        if(hour==0 && min==0 && s==0){
            return null;
        }
        Time t = new Time((int)hour, (int)min, (int)s);
        return t;
    }
    
    public java.sql.Date obtain_date(){
        String month = String.valueOf(spn_month.getValue());
        int month_data = 0;
        switch (month) {
            case "Enero":
                month_data = 0;
                break;
            case "Febrero":
                month_data = 1;
                break;
            case "Marzo":
                month_data = 2;
                break;
            case "Abril":
                month_data = 3;
                break;
            case "Mayo":
                month_data = 4;
                break;
            case "Junio":
                month_data = 5;
                break;
            case "Julio":
                month_data = 6;
                break;
            case "Agosto":
                month_data = 7;
                break;
            case "Septiembre":
                month_data = 8;
                break;
            case "Octubre":
                month_data = 9;
                break;
            case "Noviembre":
                month_data = 10;
                break;
            case "Diciembre":
                month_data = 11;
                break;
            default:
                break;
        }
        java.sql.Date date = new java.sql.Date(Integer.parseInt(String.valueOf(spn_year.getValue())) - 1900,
                             month_data, 
                             Integer.parseInt(String.valueOf(spn_day.getValue())));
        LocalDate nowLocal = LocalDate.now();
        java.sql.Date now = new java.sql.Date(nowLocal.getYear()-1900, nowLocal.getMonthValue()-1, nowLocal.getDayOfMonth());
        if(date.compareTo(now) > 0){
            date=null;
        }
        return date;
    }
    
    public boolean compare_dates(Time start, Time total){
        boolean posible = true;
        if(start!=null && total!=null){
            java.sql.Date date = obtain_date();
            LocalDate nowLocal = LocalDate.now();
            java.sql.Date now = new java.sql.Date(nowLocal.getYear()-1900, nowLocal.getMonthValue()-1, nowLocal.getDayOfMonth());
            if((start.getHours()+total.getHours()) > 23){
                if(date.compareTo(now) == 0){
                    posible = false; 
                }
            }
        }
        return posible;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_delete2;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_register_user;
    private javax.swing.JComboBox<String> cbx_formatEnd;
    private javax.swing.JComboBox<String> cbx_formatStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_date;
    private javax.swing.JLabel lbl_date1;
    private javax.swing.JLabel lbl_endPlace;
    private javax.swing.JLabel lbl_endTime;
    private javax.swing.JLabel lbl_hours;
    private javax.swing.JLabel lbl_hours1;
    private javax.swing.JLabel lbl_hours2;
    private javax.swing.JLabel lbl_idRoute;
    private javax.swing.JLabel lbl_kilometer;
    private javax.swing.JLabel lbl_minutes;
    private javax.swing.JLabel lbl_minutes1;
    private javax.swing.JLabel lbl_minutes2;
    private javax.swing.JLabel lbl_minutes3;
    private javax.swing.JLabel lbl_minutes4;
    private javax.swing.JLabel lbl_minutes5;
    private javax.swing.JLabel lbl_startPlace;
    private javax.swing.JLabel lbl_startTime;
    private javax.swing.JLabel lbl_title;
    private javax.swing.JLabel lbl_title1;
    private javax.swing.JSpinner spn_day;
    private javax.swing.JSpinner spn_hoursEndTime;
    private javax.swing.JSpinner spn_hoursStartTime;
    private javax.swing.JSpinner spn_kilometer;
    private javax.swing.JSpinner spn_minutesEndTime;
    private javax.swing.JSpinner spn_minutesStartTime;
    private javax.swing.JSpinner spn_month;
    private javax.swing.JSpinner spn_month_see;
    private javax.swing.JSpinner spn_secondEndTime;
    private javax.swing.JSpinner spn_secondStartTime;
    private javax.swing.JSpinner spn_year;
    private javax.swing.JTable tbl_routes;
    private javax.swing.JTextField txt_endPlace;
    private javax.swing.JTextField txt_idRoute;
    private javax.swing.JTextField txt_startPlace;
    // End of variables declaration//GEN-END:variables
}
